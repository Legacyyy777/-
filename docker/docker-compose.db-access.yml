# Docker Compose для MiniApp с прямым доступом к БД бота
# 
# ИСПОЛЬЗОВАНИЕ:
# 1. Разместите этот файл в папке с ботом
# 2. Запустите вместе с основным docker-compose.yml бота:
#    docker-compose -f docker-compose.yml -f docker-compose.db-access.yml up -d

version: '3.8'

services:
  # Backend для MiniApp (читает из PostgreSQL бота)
  miniapp-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    image: remnawave-miniapp-backend:latest
    container_name: remnawave_miniapp_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Подключение к PostgreSQL бота
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-remnawave_bot}
      POSTGRES_USER: ${MINIAPP_DB_USER:-miniapp_readonly}
      POSTGRES_PASSWORD: ${MINIAPP_DB_PASSWORD:-miniapp_readonly_password}
      
      # Настройки
      PORT: 3001
      NODE_ENV: production
      BOT_TOKEN: ${BOT_TOKEN}
      ALLOWED_ORIGINS: "http://localhost:3000,https://testminiapp.legacyyy777.site"
      
      TZ: "Europe/Moscow"
    ports:
      - "127.0.0.1:3001:3001"  # Доступен только локально
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend MiniApp (опционально, если хотите запустить в Docker)
  miniapp-frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        VITE_API_BASE_URL: http://miniapp-backend:3001
        VITE_BOT_USERNAME: "@your_bot"
        VITE_ENABLE_3D_EFFECTS: "true"
        VITE_ENABLE_PARTICLES: "true"
        VITE_APP_NAME: "VPN Subscription"
        VITE_DEFAULT_LANGUAGE: "ru"
    image: remnawave-miniapp-frontend:latest
    container_name: remnawave_miniapp_frontend
    restart: unless-stopped
    depends_on:
      - miniapp-backend
    ports:
      - "${MINIAPP_PORT:-3000}:3000"
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  bot_network:
    external: true


