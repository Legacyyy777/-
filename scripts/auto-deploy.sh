#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π MiniApp Backend
# –û–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π MiniApp Backend${NC}"
echo ""

# 1. –ù–∞–π—Ç–∏ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ—Ç–∞
echo -e "${YELLOW}üì¶ –ü–æ–∏—Å–∫ PostgreSQL –±–æ—Ç–∞...${NC}"

# –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º remnawave_bot_db
PG_CONTAINER=$(docker ps --format "{{.Names}}" | grep -E "remnawave.*db|remnawave_bot_db" | head -1)

# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
if [ -z "$PG_CONTAINER" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  remnawave_bot_db –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏${NC}"
    echo ""
    echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps --filter name=postgres --filter name=db --format "  - {{.Names}}"
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –¥–ª—è Bedolaga –±–æ—Ç–∞: " PG_CONTAINER
    
    if [ -z "$PG_CONTAINER" ]; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω!${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω: $PG_CONTAINER${NC}"

# 2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç—å PostgreSQL
echo -e "${YELLOW}üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏...${NC}"
PG_NETWORK=$(docker inspect $PG_CONTAINER --format '{{range $k, $v := .NetworkSettings.Networks}}{{$k}}{{end}}')

if [ -z "$PG_NETWORK" ]; then
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç—å${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ –°–µ—Ç—å: $PG_NETWORK${NC}"

# 3. –ù–∞–π—Ç–∏ .env –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å BOT_TOKEN
echo -e "${YELLOW}üîë –ü–æ–∏—Å–∫ BOT_TOKEN...${NC}"
BOT_TOKEN=""

# –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ .env –±–æ—Ç–∞
BOT_PATHS=(
    "/opt/mybot/.env"
    "/opt/bot/.env"
    "/root/bot/.env"
    "/root/remnawave-bedolaga-telegram-bot/.env"
    "/var/www/bot/.env"
    "/home/*/bot/.env"
)

for path in "${BOT_PATHS[@]}"; do
    if [ -f "$path" ]; then
        BOT_TOKEN=$(grep "^BOT_TOKEN=" "$path" | cut -d '=' -f2- | tr -d '"' | tr -d "'")
        if [ -n "$BOT_TOKEN" ]; then
            echo -e "${GREEN}‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω –≤: $path${NC}"
            break
        fi
    fi
done

if [ -z "$BOT_TOKEN" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏${NC}"
    read -p "–í–≤–µ–¥–∏—Ç–µ BOT_TOKEN –≤—Ä—É—á–Ω—É—é: " BOT_TOKEN
    if [ -z "$BOT_TOKEN" ]; then
        echo -e "${RED}‚ùå BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ BOT_TOKEN: ${BOT_TOKEN:0:10}...${NC}"

# 4. –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å backend/.env
echo -e "${YELLOW}üìù –°–æ–∑–¥–∞–Ω–∏–µ backend/.env...${NC}"

# –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ .env –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π
if [ -f "backend/.env" ]; then
    DB_PASSWORD=$(grep "^POSTGRES_PASSWORD=" backend/.env | cut -d '=' -f2-)
fi

if [ -z "$DB_PASSWORD" ]; then
    DB_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-20)
fi

# –°–æ–∑–¥–∞—ë–º .env –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
echo "# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞" > backend/.env
echo "POSTGRES_HOST=postgres" >> backend/.env
echo "POSTGRES_PORT=5432" >> backend/.env
echo "POSTGRES_DB=remnawave_bot" >> backend/.env
echo "POSTGRES_USER=miniapp_readonly" >> backend/.env
echo "POSTGRES_PASSWORD=${DB_PASSWORD}" >> backend/.env
echo "" >> backend/.env
echo "# –ü–æ—Ä—Ç API" >> backend/.env
echo "PORT=3003" >> backend/.env
echo "" >> backend/.env
echo "# CORS" >> backend/.env
echo "ALLOWED_ORIGINS=http://localhost:3000,https://testminiapp.legacyyy777.site" >> backend/.env
echo "" >> backend/.env
echo "# –†–µ–∂–∏–º" >> backend/.env
echo "NODE_ENV=production" >> backend/.env
echo "" >> backend/.env
echo "# Telegram Bot Token" >> backend/.env
echo "BOT_TOKEN=${BOT_TOKEN}" >> backend/.env

echo -e "${GREEN}‚úÖ backend/.env —Å–æ–∑–¥–∞–Ω${NC}"
echo -e "${GREEN}   –ü–∞—Ä–æ–ª—å –ë–î: ${DB_PASSWORD}${NC}"

# 5. –°–æ–∑–¥–∞—Ç—å read-only –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
echo -e "${YELLOW}üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î...${NC}"

docker exec -i $PG_CONTAINER psql -U remnawave_user -d remnawave_bot > /dev/null 2>&1 << EOF
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'miniapp_readonly') THEN
        CREATE USER miniapp_readonly WITH PASSWORD '$DB_PASSWORD';
    ELSE
        ALTER USER miniapp_readonly WITH PASSWORD '$DB_PASSWORD';
    END IF;
END
\$\$;
GRANT CONNECT ON DATABASE remnawave_bot TO miniapp_readonly;
GRANT USAGE ON SCHEMA public TO miniapp_readonly;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO miniapp_readonly;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO miniapp_readonly;
GRANT SELECT, USAGE ON ALL SEQUENCES IN SCHEMA public TO miniapp_readonly;
REVOKE INSERT, UPDATE, DELETE, TRUNCATE ON ALL TABLES IN SCHEMA public FROM miniapp_readonly;
EOF

echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø –∫ –ë–î –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"

# 6. –°–æ–∑–¥–∞—Ç—å docker-compose —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ç—å—é
echo -e "${YELLOW}üê≥ –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml...${NC}"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_DIR="$( cd "$SCRIPT_DIR/.." && pwd )"

cat > backend/docker-compose.yml << EOF
version: '3.8'

services:
  miniapp-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: remnawave_miniapp_backend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "127.0.0.1:3003:3003"
    networks:
      - $PG_NETWORK
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  $PG_NETWORK:
    external: true
EOF

echo -e "${GREEN}‚úÖ docker-compose.yml —Å–æ–∑–¥–∞–Ω${NC}"

# 7. –ó–∞–ø—É—Å—Ç–∏—Ç—å backend
echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ backend...${NC}"
cd backend
docker compose down 2>/dev/null || true
docker compose up -d --build

echo ""
echo -e "${GREEN}‚úÖ Backend –∑–∞–ø—É—â–µ–Ω!${NC}"
echo ""
echo -e "${BLUE}üìä –ü—Ä–æ–≤–µ—Ä–∫–∞:${NC}"
echo "  –õ–æ–≥–∏:        docker logs -f remnawave_miniapp_backend"
echo "  Health:      curl http://localhost:3003/health"
echo "  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:  cd backend && docker compose down"
echo ""
echo -e "${YELLOW}üìù –ü–æ—Ä—Ç—ã:${NC}"
echo "  Frontend (miniapp): http://localhost:3001"
echo "  Backend (API):      http://localhost:3003"
echo ""

# –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
sleep 3
echo -e "${BLUE}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:${NC}"
docker logs --tail 20 remnawave_miniapp_backend

echo ""
echo -e "${GREEN}üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!${NC}"

