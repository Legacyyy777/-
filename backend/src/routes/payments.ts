import { Router, Request, Response } from 'express';
import { query } from '../db';

const router = Router();

/**
 * POST /api/payments/methods
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
 */
router.post('/methods', async (req: Request, res: Response) => {
    try {
        const userId = req.telegramUser?.id;

        if (!userId) {
            return res.status(401).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        const methods = [
            {
                id: 'cryptobot',
                name: 'CryptoBot',
                icon: 'üíé',
                currency: 'USDT/TON',
                min_amount_kopeks: 10000, // 100‚ÇΩ
                max_amount_kopeks: 10000000, // 100,000‚ÇΩ
                requires_amount: true,
                is_active: true,
            },
            {
                id: 'yookassa',
                name: '–ÆKassa (–ö–∞—Ä—Ç—ã)',
                icon: 'üí≥',
                currency: 'RUB',
                min_amount_kopeks: 10000,
                max_amount_kopeks: 10000000,
                requires_amount: true,
                is_active: true,
            },
            {
                id: 'stars',
                name: 'Telegram Stars',
                icon: '‚≠ê',
                currency: 'Stars',
                min_amount_kopeks: 0,
                max_amount_kopeks: 0,
                requires_amount: false,
                is_active: true,
            },
        ];

        res.json({
            success: true,
            methods: methods.filter(m => m.is_active),
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã',
        });
    }
});

/**
 * POST /api/payments/initiate
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 */
router.post('/initiate', async (req: Request, res: Response) => {
    try {
        const userId = req.telegramUser?.id;
        const { method_id, amount_kopeks } = req.body;

        if (!userId) {
            return res.status(401).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            });
        }

        if (!method_id) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
            });
        }

        // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
        // –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        res.json({
            success: true,
            payment_id: `payment_${Date.now()}`,
            payment_url: `https://example.com/pay?amount=${amount_kopeks}`,
            status: 'pending',
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
        });
    }
});

export default router;

