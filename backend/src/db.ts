import { Pool } from 'pg';

// –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL
export const dbPool = new Pool({
    host: process.env.POSTGRES_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_PORT || '5432'),
    database: process.env.POSTGRES_DB || 'remnawave_bot',
    user: process.env.POSTGRES_USER || 'miniapp_readonly',
    password: process.env.POSTGRES_PASSWORD || '',
    max: 20, // –ú–∞–∫—Å–∏–º—É–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
dbPool.on('error', (err) => {
    console.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ PostgreSQL:', err);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export async function testConnection(): Promise<void> {
    const client = await dbPool.connect();
    try {
        const result = await client.query('SELECT NOW()');
        console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω:', result.rows[0].now);
    } finally {
        client.release();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
export async function query<T = any>(text: string, params?: any[]): Promise<T[]> {
    const start = Date.now();
    try {
        const result = await dbPool.query(text, params);
        const duration = Date.now() - start;
        
        if (process.env.NODE_ENV !== 'production') {
            console.log('üìä SQL:', {
                text: text.substring(0, 100),
                duration: `${duration}ms`,
                rows: result.rowCount,
            });
        }
        
        return result.rows;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞:', error);
        throw error;
    }
}

export default dbPool;

