import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { dbPool, testConnection } from './db';
import subscriptionRoutes from './routes/subscription';
import balanceRoutes from './routes/balance';
import referralRoutes from './routes/referral';
import { errorHandler } from './middleware/errorHandler';
import { validateInitData } from './middleware/auth';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors({
    origin: process.env.ALLOWED_ORIGINS?.split(',') || '*',
    credentials: true,
}));

app.use(express.json());

// Health check
app.get('/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        service: 'miniapp-backend',
    });
});

// API routes (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Telegram initData)
app.use('/api/subscription', validateInitData, subscriptionRoutes);
app.use('/api/balance', validateInitData, balanceRoutes);
app.use('/api/referral', validateInitData, referralRoutes);

// Error handler
app.use(errorHandler);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await testConnection();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        app.listen(PORT, () => {
            console.log(`üöÄ MiniApp Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_DB}`);
            console.log(`üîê –†–µ–∂–∏–º: ${process.env.NODE_ENV}`);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        process.exit(1);
    }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('‚ö†Ô∏è SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await dbPool.end();
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('‚ö†Ô∏è SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await dbPool.end();
    process.exit(0);
});

start();

